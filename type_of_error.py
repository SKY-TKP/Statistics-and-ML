# -*- coding: utf-8 -*-
"""Type of Error.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CO3Y8QfAYKVH7KFdPUiAjYGTzAlLu30W
"""

import numpy as np
import matplotlib.pyplot as plt
from ipywidgets import interact, widgets
from scipy.stats import norm

# กำหนดค่าพารามิเตอร์เริ่มต้น
mu_null = 0
mu_alternative = 2
sigma = 1
n = 30
alpha = 0.05
test_type = 'right'

# สร้างฟังก์ชันสำหรับแจกแจง
def plot_distribution(mu, color, label, linestyle='-'):
    x = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 100)
    y = (1 / (sigma * np.sqrt(2 * np.pi))) * np.exp(-0.5 * ((x - mu) / sigma) ** 2)
    plt.plot(x, y, color=color, label=label, linestyle=linestyle)

# ฟังก์ชันสำหรับอัพเดต Interactive plot
def update_plot(mu_null, mu_alternative, sigma, n, alpha, test_type):
    plt.figure(figsize=(10, 5))

    # คำนวณค่าวิกฤต (critical value)
    if test_type == 'left':
        critical_value = norm.ppf(alpha, loc=mu_null, scale=sigma / np.sqrt(n))
    elif test_type == 'right':
        critical_value = norm.ppf(1 - alpha, loc=mu_null, scale=sigma / np.sqrt(n))
    else:
        critical_value_left = norm.ppf(alpha / 2, loc=mu_null, scale=sigma / np.sqrt(n))
        critical_value_right = norm.ppf(1 - alpha / 2, loc=mu_null, scale=sigma / np.sqrt(n))

    # แสดงการแจกแจงภายใต้สมมติฐานว่าง (เส้นทึบ)
    plot_distribution(mu_null, 'blue', 'H0')

    # แสดงการแจกแจงภายใต้สมมติฐานทางเลือก (เส้นประ)
    plot_distribution(mu_alternative, 'red', 'Ha', linestyle='--')

    # แรเงาพื้นที่
    x = np.linspace(mu_null - 3 * sigma, mu_alternative + 3 * sigma, 1000)
    y_null = (1 / (sigma * np.sqrt(2 * np.pi))) * np.exp(-0.5 * ((x - mu_null) / sigma) ** 2)
    y_alternative = (1 / (sigma * np.sqrt(2 * np.pi))) * np.exp(-0.5 * ((x - mu_alternative) / sigma) ** 2)

    if test_type == 'left':
        plt.fill_between(x, y_null, where=x < critical_value, color='red', alpha=0.2, label='Alpha')
        plt.fill_between(x, y_alternative, where=x > critical_value, color='skyblue', alpha=0.2, label='Beta')
    elif test_type == 'right':
        plt.fill_between(x, y_null, where=x > critical_value, color='red', alpha=0.2, label='Alpha')
        plt.fill_between(x, y_alternative, where=x < critical_value, color='skyblue', alpha=0.2, label='Beta')
    else:
        plt.fill_between(x, y_null, where=(x > critical_value_right) | (x < critical_value_left), color='red', alpha=0.2, label='Alpha')
        plt.fill_between(x, y_alternative, where=(x < critical_value_right) & (x > critical_value_left), color='skyblue', alpha=0.2, label='Beta')

    # แสดงผล
    plt.xlabel('Sample Mean')
    plt.ylabel('Probability Density')
    plt.title('Type I and Type II Error')
    plt.legend()
    plt.show()

# สร้าง Interactive plot
interact(update_plot,
         mu_null=widgets.FloatSlider(min=-3, max=3, step=0.1, value=0),
         mu_alternative=widgets.FloatSlider(min=-3, max=3, step=0.1, value=2),
         sigma=widgets.FloatSlider(min=0.1, max=3, step=0.1, value=1),
         n=widgets.IntSlider(min=1, max=100, step=1, value=30),
         alpha=widgets.FloatSlider(min=0.01, max=0.1, step=0.01, value=0.05),
         test_type=widgets.Dropdown(options=['left', 'right', 'two-sided'], value='right'))